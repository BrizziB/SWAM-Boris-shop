{
  "_args": [
    [
      {
        "raw": "rijs.components@https://registry.npmjs.org/rijs.components/-/rijs.components-0.1.1.tgz",
        "scope": null,
        "escapedName": "rijs.components",
        "name": "rijs.components",
        "rawSpec": "https://registry.npmjs.org/rijs.components/-/rijs.components-0.1.1.tgz",
        "spec": "https://registry.npmjs.org/rijs.components/-/rijs.components-0.1.1.tgz",
        "type": "remote"
      },
      "C:\\Users\\Boris\\Documents\\Unifi\\SWAM Boris-shop\\client\\Boris-shop\\node_modules\\rijs"
    ]
  ],
  "_from": "rijs.components@*",
  "_id": "rijs.components@0.1.1",
  "_inCache": true,
  "_location": "/rijs/rijs.components",
  "_phantomChildren": {},
  "_requested": {
    "raw": "rijs.components@https://registry.npmjs.org/rijs.components/-/rijs.components-0.1.1.tgz",
    "scope": null,
    "escapedName": "rijs.components",
    "name": "rijs.components",
    "rawSpec": "https://registry.npmjs.org/rijs.components/-/rijs.components-0.1.1.tgz",
    "spec": "https://registry.npmjs.org/rijs.components/-/rijs.components-0.1.1.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/rijs"
  ],
  "_resolved": "https://registry.npmjs.org/rijs.components/-/rijs.components-0.1.1.tgz",
  "_shasum": "121b848d857f05b9580ccca12050ff5645abcd5f",
  "_shrinkwrap": null,
  "_spec": "rijs.components@https://registry.npmjs.org/rijs.components/-/rijs.components-0.1.1.tgz",
  "_where": "C:\\Users\\Boris\\Documents\\Unifi\\SWAM Boris-shop\\client\\Boris-shop\\node_modules\\rijs",
  "author": {
    "name": "Pedram Emrouznejad",
    "url": "https://github.com/pemrouz"
  },
  "bugs": {
    "url": "https://github.com/rijs/components/issues"
  },
  "dependencies": {
    "utilise": "*"
  },
  "description": "[![Coverage Status](https://coveralls.io/repos/rijs/components/badge.svg?branch=master&service=github)](https://coveralls.io/github/rijs/components?branch=master)\r [![Build Status](https://travis-ci.org/rijs/components.svg)](https://travis-ci.org/rijs/components)",
  "devDependencies": {
    "babel-cli": "*",
    "babel-preset-es2015": "*",
    "browserify": "*",
    "chai": "*",
    "coveralls": "*",
    "istanbul": "*",
    "mocha": "*",
    "mocha-lcov-reporter": "*",
    "popper": "*",
    "rijs.core": "*",
    "rijs.data": "*",
    "rijs.fn": "*",
    "uglify-js": "*"
  },
  "homepage": "https://github.com/rijs/components#readme",
  "license": "pemrouz.mit-license.org",
  "main": "dist",
  "name": "rijs.components",
  "optionalDependencies": {},
  "readme": "# Ripple | Components\r\n[![Coverage Status](https://coveralls.io/repos/rijs/components/badge.svg?branch=master&service=github)](https://coveralls.io/github/rijs/components?branch=master)\r\n[![Build Status](https://travis-ci.org/rijs/components.svg)](https://travis-ci.org/rijs/components)\r\n\r\nRedraws any custom elements on the page when any of it's dependencies change (either the component definition, data, or styles).\r\n\r\nGiven the following markup on your page:\r\n\r\n```html\r\n<component-name data=\"something\">\r\n```\r\n\r\nWith a `component-name` (function) and `something` (data) registered in Ripple, it will invoke `component-name.call(<el>, something)` whenever a change is detected in either of those resources. Internally, this is basically implemented as follows but in a more generic form:\r\n\r\n```js\r\nripple('something').on('change', function(){\r\n\r\n  all('[data=something]')\r\n    .map(ripple.draw)\r\n    \r\n})\r\n```\r\n\r\nAll instances of Custom Elements will be upgraded automatically. You can also manually invoke renders:\r\n\r\n```js\r\nripple.draw(<el> | resource object | resource name)\r\n```\r\n\r\nIf the first parameter is a DOM element, it will rerender that. If it is a resource (name or object), it will rerender anything on your page that depends on that resource. \r\n\r\nSee the [Primer#Components](https://github.com/rijs/docs/blob/master/primer.md#3-components) for more info",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/rijs/components.git"
  },
  "scripts": {
    "babel": "babel src -d dist",
    "build": "npm run clean && npm run babel && npm run ignore",
    "clean": "rm -rf dist && mkdir dist",
    "ignore": "find ./dist -type f -exec sed -i \"s/var _interopRequire/\\/* istanbul ignore next *\\/\\nvar _interopRequire/g\" {} ';'",
    "postversion": "git push && git push --tags",
    "test": "popper",
    "version": "npm run build && git add -A"
  },
  "version": "0.1.1"
}
